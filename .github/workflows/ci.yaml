name: Node.js CI Pipeline

on:
  push:
    branches:
      - master

env:
  DOCKER_USERNAME: sandhya0593 # Docker Hub username
  DOCKER_REPO: netflixk8s # Docker Hub repository name
  SONAR_PROJECT_KEY: netflix # SonarQube project key
  SONAR_HOST_URL: http://3.84.169.175:9000
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # SonarQube authentication token
  KUBERNETES_DEPLOYMENT_FILE: Kubernetes/deployment.yml #rnetes deployment file path

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Run SonarQube analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          projectKey: ${{ env.SONAR_PROJECT_KEY }}
          hostUrl: ${{ env.SONAR_HOST_URL }}
          token: ${{ env.SONAR_TOKEN }}

      # Step 3: Build Docker image with a unique tag
      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $DOCKER_USERNAME/$DOCKER_REPO:$IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Step 4: Scan Docker image with Trivy
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@v0.11.0
        with:
          image-ref: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}

      # Step 5: Push Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_USERNAME/$DOCKER_REPO:${{ env.IMAGE_TAG }}
          docker tag $DOCKER_USERNAME/$DOCKER_REPO:${{ env.IMAGE_TAG }} $DOCKER_USERNAME/$DOCKER_REPO:latest
          docker push $DOCKER_USERNAME/$DOCKER_REPO:latest

      # Step 6: Update Kubernetes deployment file with new image tag
      - name: Update Kubernetes Deployment
        run: |
          sed -i "s|image: $DOCKER_USERNAME/$DOCKER_REPO:.*|image: $DOCKER_USERNAME/$DOCKER_REPO:${{ env.IMAGE_TAG }}|g" $KUBERNETES_DEPLOYMENT_FILE
          git config --global user.name "slax508
          git config --global user.email "sankulaxman1998@gmail.com"
          git add $KUBERNETES_DEPLOYMENT_FILE
          git commit -m "Update deployment image to $DOCKER_USERNAME/$DOCKER_REPO:${{ env.IMAGE_TAG }}"
          git push

# Explanation of Steps:
# 1. Checkout Code: Fetches the repository code to the runner.
# 2. SonarQube Scan: Analyzes the code for bugs, vulnerabilities, and code smells using SonarQube.
# 3. Build Docker Image: Builds a Docker image with a unique tag based on the commit SHA.
# 4. Scan Docker Image with Trivy: Scans the Docker image for vulnerabilities using Trivy.
# 5. Push Docker Image: Pushes the Docker image to Docker Hub with both the unique tag and the "latest" tag.
# 6. Update Kubernetes Deployment: Updates the Kubernetes deployment file with the new image tag and commits the change back to the repository.